/* automatically generated by rust-bindgen */

#[link(name = "pulse")] extern {}

pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _SYS_PARAM_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const PA_API_VERSION: u32 = 12;
pub const PA_PROTOCOL_VERSION: u32 = 32;
pub const PA_MAJOR: u32 = 12;
pub const PA_MINOR: u32 = 2;
pub const PA_MICRO: u32 = 0;
pub const PA_CHANNELS_MAX: u32 = 32;
pub const PA_RATE_MAX: u32 = 384000;
pub const PA_SAMPLE_SPEC_SNPRINT_MAX: u32 = 32;
pub const PA_BYTES_SNPRINT_MAX: u32 = 11;
pub const PA_CHANNEL_MAP_SNPRINT_MAX: u32 = 336;
pub const _SYS_TIME_H: u32 = 1;
pub const PA_STREAM_EVENT_REQUEST_CORK: &'static [u8; 13usize] = b"request-cork\0";
pub const PA_STREAM_EVENT_REQUEST_UNCORK: &'static [u8; 15usize] = b"request-uncork\0";
pub const PA_STREAM_EVENT_FORMAT_LOST: &'static [u8; 12usize] = b"format-lost\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
pub const SI_ASYNCNL: _bindgen_ty_1 = -60;
pub const SI_DETHREAD: _bindgen_ty_1 = -7;
pub const SI_TKILL: _bindgen_ty_1 = -6;
pub const SI_SIGIO: _bindgen_ty_1 = -5;
pub const SI_ASYNCIO: _bindgen_ty_1 = -4;
pub const SI_MESGQ: _bindgen_ty_1 = -3;
pub const SI_TIMER: _bindgen_ty_1 = -2;
pub const SI_QUEUE: _bindgen_ty_1 = -1;
pub const SI_USER: _bindgen_ty_1 = 0;
pub const SI_KERNEL: _bindgen_ty_1 = 128;
pub type _bindgen_ty_1 = i32;
pub const ILL_ILLOPC: _bindgen_ty_2 = 1;
pub const ILL_ILLOPN: _bindgen_ty_2 = 2;
pub const ILL_ILLADR: _bindgen_ty_2 = 3;
pub const ILL_ILLTRP: _bindgen_ty_2 = 4;
pub const ILL_PRVOPC: _bindgen_ty_2 = 5;
pub const ILL_PRVREG: _bindgen_ty_2 = 6;
pub const ILL_COPROC: _bindgen_ty_2 = 7;
pub const ILL_BADSTK: _bindgen_ty_2 = 8;
pub const ILL_BADIADDR: _bindgen_ty_2 = 9;
pub type _bindgen_ty_2 = u32;
pub const FPE_INTDIV: _bindgen_ty_3 = 1;
pub const FPE_INTOVF: _bindgen_ty_3 = 2;
pub const FPE_FLTDIV: _bindgen_ty_3 = 3;
pub const FPE_FLTOVF: _bindgen_ty_3 = 4;
pub const FPE_FLTUND: _bindgen_ty_3 = 5;
pub const FPE_FLTRES: _bindgen_ty_3 = 6;
pub const FPE_FLTINV: _bindgen_ty_3 = 7;
pub const FPE_FLTSUB: _bindgen_ty_3 = 8;
pub const FPE_FLTUNK: _bindgen_ty_3 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_3 = 15;
pub type _bindgen_ty_3 = u32;
pub const SEGV_MAPERR: _bindgen_ty_4 = 1;
pub const SEGV_ACCERR: _bindgen_ty_4 = 2;
pub const SEGV_BNDERR: _bindgen_ty_4 = 3;
pub const SEGV_PKUERR: _bindgen_ty_4 = 4;
pub const SEGV_ACCADI: _bindgen_ty_4 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_4 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_4 = 7;
pub type _bindgen_ty_4 = u32;
pub const BUS_ADRALN: _bindgen_ty_5 = 1;
pub const BUS_ADRERR: _bindgen_ty_5 = 2;
pub const BUS_OBJERR: _bindgen_ty_5 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_5 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_5 = 5;
pub type _bindgen_ty_5 = u32;
pub const CLD_EXITED: _bindgen_ty_6 = 1;
pub const CLD_KILLED: _bindgen_ty_6 = 2;
pub const CLD_DUMPED: _bindgen_ty_6 = 3;
pub const CLD_TRAPPED: _bindgen_ty_6 = 4;
pub const CLD_STOPPED: _bindgen_ty_6 = 5;
pub const CLD_CONTINUED: _bindgen_ty_6 = 6;
pub type _bindgen_ty_6 = u32;
pub const POLL_IN: _bindgen_ty_7 = 1;
pub const POLL_OUT: _bindgen_ty_7 = 2;
pub const POLL_MSG: _bindgen_ty_7 = 3;
pub const POLL_ERR: _bindgen_ty_7 = 4;
pub const POLL_PRI: _bindgen_ty_7 = 5;
pub const POLL_HUP: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = u32;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_8 = 0;
pub const SIGEV_NONE: _bindgen_ty_8 = 1;
pub const SIGEV_THREAD: _bindgen_ty_8 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = u32;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "\u{1}sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_9 = 1;
pub const SS_DISABLE: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = u32;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_get_library_version() -> *const ::std::os::raw::c_char;
}
pub const pa_sample_format_PA_SAMPLE_U8: pa_sample_format = 0;
pub const pa_sample_format_PA_SAMPLE_ALAW: pa_sample_format = 1;
pub const pa_sample_format_PA_SAMPLE_ULAW: pa_sample_format = 2;
pub const pa_sample_format_PA_SAMPLE_S16LE: pa_sample_format = 3;
pub const pa_sample_format_PA_SAMPLE_S16BE: pa_sample_format = 4;
pub const pa_sample_format_PA_SAMPLE_FLOAT32LE: pa_sample_format = 5;
pub const pa_sample_format_PA_SAMPLE_FLOAT32BE: pa_sample_format = 6;
pub const pa_sample_format_PA_SAMPLE_S32LE: pa_sample_format = 7;
pub const pa_sample_format_PA_SAMPLE_S32BE: pa_sample_format = 8;
pub const pa_sample_format_PA_SAMPLE_S24LE: pa_sample_format = 9;
pub const pa_sample_format_PA_SAMPLE_S24BE: pa_sample_format = 10;
pub const pa_sample_format_PA_SAMPLE_S24_32LE: pa_sample_format = 11;
pub const pa_sample_format_PA_SAMPLE_S24_32BE: pa_sample_format = 12;
pub const pa_sample_format_PA_SAMPLE_MAX: pa_sample_format = 13;
pub const pa_sample_format_PA_SAMPLE_INVALID: pa_sample_format = -1;
pub type pa_sample_format = i32;
pub use self::pa_sample_format as pa_sample_format_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_sample_spec {
    pub format: pa_sample_format_t,
    pub rate: u32,
    pub channels: u8,
}
pub type pa_usec_t = u64;
extern "C" {
    pub fn pa_bytes_per_second(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_frame_size(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_size(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_size_of_format(f: pa_sample_format_t) -> usize;
}
extern "C" {
    pub fn pa_bytes_to_usec(length: u64, spec: *const pa_sample_spec) -> pa_usec_t;
}
extern "C" {
    pub fn pa_usec_to_bytes(t: pa_usec_t, spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_spec_init(spec: *mut pa_sample_spec) -> *mut pa_sample_spec;
}
extern "C" {
    pub fn pa_sample_format_valid(format: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_rate_valid(rate: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channels_valid(channels: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_spec_valid(spec: *const pa_sample_spec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_spec_equal(
        a: *const pa_sample_spec,
        b: *const pa_sample_spec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_format_to_string(f: pa_sample_format_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_parse_sample_format(format: *const ::std::os::raw::c_char) -> pa_sample_format_t;
}
extern "C" {
    pub fn pa_sample_spec_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        spec: *const pa_sample_spec,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_bytes_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        v: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_sample_format_is_le(f: pa_sample_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_format_is_be(f: pa_sample_format_t) -> ::std::os::raw::c_int;
}
pub const pa_channel_position_PA_CHANNEL_POSITION_INVALID: pa_channel_position = -1;
pub const pa_channel_position_PA_CHANNEL_POSITION_MONO: pa_channel_position = 0;
pub const pa_channel_position_PA_CHANNEL_POSITION_FRONT_LEFT: pa_channel_position = 1;
pub const pa_channel_position_PA_CHANNEL_POSITION_FRONT_RIGHT: pa_channel_position = 2;
pub const pa_channel_position_PA_CHANNEL_POSITION_FRONT_CENTER: pa_channel_position = 3;
pub const pa_channel_position_PA_CHANNEL_POSITION_LEFT: pa_channel_position = 1;
pub const pa_channel_position_PA_CHANNEL_POSITION_RIGHT: pa_channel_position = 2;
pub const pa_channel_position_PA_CHANNEL_POSITION_CENTER: pa_channel_position = 3;
pub const pa_channel_position_PA_CHANNEL_POSITION_REAR_CENTER: pa_channel_position = 4;
pub const pa_channel_position_PA_CHANNEL_POSITION_REAR_LEFT: pa_channel_position = 5;
pub const pa_channel_position_PA_CHANNEL_POSITION_REAR_RIGHT: pa_channel_position = 6;
pub const pa_channel_position_PA_CHANNEL_POSITION_LFE: pa_channel_position = 7;
pub const pa_channel_position_PA_CHANNEL_POSITION_SUBWOOFER: pa_channel_position = 7;
pub const pa_channel_position_PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER: pa_channel_position = 8;
pub const pa_channel_position_PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER: pa_channel_position = 9;
pub const pa_channel_position_PA_CHANNEL_POSITION_SIDE_LEFT: pa_channel_position = 10;
pub const pa_channel_position_PA_CHANNEL_POSITION_SIDE_RIGHT: pa_channel_position = 11;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX0: pa_channel_position = 12;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX1: pa_channel_position = 13;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX2: pa_channel_position = 14;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX3: pa_channel_position = 15;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX4: pa_channel_position = 16;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX5: pa_channel_position = 17;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX6: pa_channel_position = 18;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX7: pa_channel_position = 19;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX8: pa_channel_position = 20;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX9: pa_channel_position = 21;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX10: pa_channel_position = 22;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX11: pa_channel_position = 23;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX12: pa_channel_position = 24;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX13: pa_channel_position = 25;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX14: pa_channel_position = 26;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX15: pa_channel_position = 27;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX16: pa_channel_position = 28;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX17: pa_channel_position = 29;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX18: pa_channel_position = 30;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX19: pa_channel_position = 31;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX20: pa_channel_position = 32;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX21: pa_channel_position = 33;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX22: pa_channel_position = 34;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX23: pa_channel_position = 35;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX24: pa_channel_position = 36;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX25: pa_channel_position = 37;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX26: pa_channel_position = 38;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX27: pa_channel_position = 39;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX28: pa_channel_position = 40;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX29: pa_channel_position = 41;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX30: pa_channel_position = 42;
pub const pa_channel_position_PA_CHANNEL_POSITION_AUX31: pa_channel_position = 43;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_CENTER: pa_channel_position = 44;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_FRONT_LEFT: pa_channel_position = 45;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_FRONT_RIGHT: pa_channel_position = 46;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_FRONT_CENTER: pa_channel_position = 47;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_REAR_LEFT: pa_channel_position = 48;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_REAR_RIGHT: pa_channel_position = 49;
pub const pa_channel_position_PA_CHANNEL_POSITION_TOP_REAR_CENTER: pa_channel_position = 50;
pub const pa_channel_position_PA_CHANNEL_POSITION_MAX: pa_channel_position = 51;
pub type pa_channel_position = i32;
pub use self::pa_channel_position as pa_channel_position_t;
pub type pa_channel_position_mask_t = u64;
pub const pa_channel_map_def_PA_CHANNEL_MAP_AIFF: pa_channel_map_def = 0;
pub const pa_channel_map_def_PA_CHANNEL_MAP_ALSA: pa_channel_map_def = 1;
pub const pa_channel_map_def_PA_CHANNEL_MAP_AUX: pa_channel_map_def = 2;
pub const pa_channel_map_def_PA_CHANNEL_MAP_WAVEEX: pa_channel_map_def = 3;
pub const pa_channel_map_def_PA_CHANNEL_MAP_OSS: pa_channel_map_def = 4;
pub const pa_channel_map_def_PA_CHANNEL_MAP_DEF_MAX: pa_channel_map_def = 5;
pub const pa_channel_map_def_PA_CHANNEL_MAP_DEFAULT: pa_channel_map_def = 0;
pub type pa_channel_map_def = u32;
pub use self::pa_channel_map_def as pa_channel_map_def_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_channel_map {
    pub channels: u8,
    pub map: [pa_channel_position_t; 32usize],
}
extern "C" {
    pub fn pa_channel_map_init(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_mono(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_stereo(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_auto(
        m: *mut pa_channel_map,
        channels: ::std::os::raw::c_uint,
        def: pa_channel_map_def_t,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_extend(
        m: *mut pa_channel_map,
        channels: ::std::os::raw::c_uint,
        def: pa_channel_map_def_t,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_position_to_string(
        pos: pa_channel_position_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_position_from_string(
        s: *const ::std::os::raw::c_char,
    ) -> pa_channel_position_t;
}
extern "C" {
    pub fn pa_channel_position_to_pretty_string(
        pos: pa_channel_position_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        map: *const pa_channel_map,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_parse(
        map: *mut pa_channel_map,
        s: *const ::std::os::raw::c_char,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_equal(
        a: *const pa_channel_map,
        b: *const pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_valid(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_compatible(
        map: *const pa_channel_map,
        ss: *const pa_sample_spec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_superset(
        a: *const pa_channel_map,
        b: *const pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_balance(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_fade(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_lfe_balance(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_to_name(map: *const pa_channel_map) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_to_pretty_name(
        map: *const pa_channel_map,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_has_position(
        map: *const pa_channel_map,
        p: pa_channel_position_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_mask(map: *const pa_channel_map) -> pa_channel_position_mask_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub const pa_context_state_PA_CONTEXT_UNCONNECTED: pa_context_state = 0;
pub const pa_context_state_PA_CONTEXT_CONNECTING: pa_context_state = 1;
pub const pa_context_state_PA_CONTEXT_AUTHORIZING: pa_context_state = 2;
pub const pa_context_state_PA_CONTEXT_SETTING_NAME: pa_context_state = 3;
pub const pa_context_state_PA_CONTEXT_READY: pa_context_state = 4;
pub const pa_context_state_PA_CONTEXT_FAILED: pa_context_state = 5;
pub const pa_context_state_PA_CONTEXT_TERMINATED: pa_context_state = 6;
pub type pa_context_state = u32;
pub use self::pa_context_state as pa_context_state_t;
pub const pa_stream_state_PA_STREAM_UNCONNECTED: pa_stream_state = 0;
pub const pa_stream_state_PA_STREAM_CREATING: pa_stream_state = 1;
pub const pa_stream_state_PA_STREAM_READY: pa_stream_state = 2;
pub const pa_stream_state_PA_STREAM_FAILED: pa_stream_state = 3;
pub const pa_stream_state_PA_STREAM_TERMINATED: pa_stream_state = 4;
pub type pa_stream_state = u32;
pub use self::pa_stream_state as pa_stream_state_t;
pub const pa_operation_state_PA_OPERATION_RUNNING: pa_operation_state = 0;
pub const pa_operation_state_PA_OPERATION_DONE: pa_operation_state = 1;
pub const pa_operation_state_PA_OPERATION_CANCELLED: pa_operation_state = 2;
pub type pa_operation_state = u32;
pub use self::pa_operation_state as pa_operation_state_t;
pub const pa_context_flags_PA_CONTEXT_NOFLAGS: pa_context_flags = 0;
pub const pa_context_flags_PA_CONTEXT_NOAUTOSPAWN: pa_context_flags = 1;
pub const pa_context_flags_PA_CONTEXT_NOFAIL: pa_context_flags = 2;
pub type pa_context_flags = u32;
pub use self::pa_context_flags as pa_context_flags_t;
pub const pa_direction_PA_DIRECTION_OUTPUT: pa_direction = 1;
pub const pa_direction_PA_DIRECTION_INPUT: pa_direction = 2;
pub type pa_direction = u32;
pub use self::pa_direction as pa_direction_t;
pub const pa_device_type_PA_DEVICE_TYPE_SINK: pa_device_type = 0;
pub const pa_device_type_PA_DEVICE_TYPE_SOURCE: pa_device_type = 1;
pub type pa_device_type = u32;
pub use self::pa_device_type as pa_device_type_t;
pub const pa_stream_direction_PA_STREAM_NODIRECTION: pa_stream_direction = 0;
pub const pa_stream_direction_PA_STREAM_PLAYBACK: pa_stream_direction = 1;
pub const pa_stream_direction_PA_STREAM_RECORD: pa_stream_direction = 2;
pub const pa_stream_direction_PA_STREAM_UPLOAD: pa_stream_direction = 3;
pub type pa_stream_direction = u32;
pub use self::pa_stream_direction as pa_stream_direction_t;
pub const pa_stream_flags_PA_STREAM_NOFLAGS: pa_stream_flags = 0;
pub const pa_stream_flags_PA_STREAM_START_CORKED: pa_stream_flags = 1;
pub const pa_stream_flags_PA_STREAM_INTERPOLATE_TIMING: pa_stream_flags = 2;
pub const pa_stream_flags_PA_STREAM_NOT_MONOTONIC: pa_stream_flags = 4;
pub const pa_stream_flags_PA_STREAM_AUTO_TIMING_UPDATE: pa_stream_flags = 8;
pub const pa_stream_flags_PA_STREAM_NO_REMAP_CHANNELS: pa_stream_flags = 16;
pub const pa_stream_flags_PA_STREAM_NO_REMIX_CHANNELS: pa_stream_flags = 32;
pub const pa_stream_flags_PA_STREAM_FIX_FORMAT: pa_stream_flags = 64;
pub const pa_stream_flags_PA_STREAM_FIX_RATE: pa_stream_flags = 128;
pub const pa_stream_flags_PA_STREAM_FIX_CHANNELS: pa_stream_flags = 256;
pub const pa_stream_flags_PA_STREAM_DONT_MOVE: pa_stream_flags = 512;
pub const pa_stream_flags_PA_STREAM_VARIABLE_RATE: pa_stream_flags = 1024;
pub const pa_stream_flags_PA_STREAM_PEAK_DETECT: pa_stream_flags = 2048;
pub const pa_stream_flags_PA_STREAM_START_MUTED: pa_stream_flags = 4096;
pub const pa_stream_flags_PA_STREAM_ADJUST_LATENCY: pa_stream_flags = 8192;
pub const pa_stream_flags_PA_STREAM_EARLY_REQUESTS: pa_stream_flags = 16384;
pub const pa_stream_flags_PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND: pa_stream_flags = 32768;
pub const pa_stream_flags_PA_STREAM_START_UNMUTED: pa_stream_flags = 65536;
pub const pa_stream_flags_PA_STREAM_FAIL_ON_SUSPEND: pa_stream_flags = 131072;
pub const pa_stream_flags_PA_STREAM_RELATIVE_VOLUME: pa_stream_flags = 262144;
pub const pa_stream_flags_PA_STREAM_PASSTHROUGH: pa_stream_flags = 524288;
pub type pa_stream_flags = u32;
pub use self::pa_stream_flags as pa_stream_flags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_buffer_attr {
    pub maxlength: u32,
    pub tlength: u32,
    pub prebuf: u32,
    pub minreq: u32,
    pub fragsize: u32,
}
pub const pa_error_code_PA_OK: pa_error_code = 0;
pub const pa_error_code_PA_ERR_ACCESS: pa_error_code = 1;
pub const pa_error_code_PA_ERR_COMMAND: pa_error_code = 2;
pub const pa_error_code_PA_ERR_INVALID: pa_error_code = 3;
pub const pa_error_code_PA_ERR_EXIST: pa_error_code = 4;
pub const pa_error_code_PA_ERR_NOENTITY: pa_error_code = 5;
pub const pa_error_code_PA_ERR_CONNECTIONREFUSED: pa_error_code = 6;
pub const pa_error_code_PA_ERR_PROTOCOL: pa_error_code = 7;
pub const pa_error_code_PA_ERR_TIMEOUT: pa_error_code = 8;
pub const pa_error_code_PA_ERR_AUTHKEY: pa_error_code = 9;
pub const pa_error_code_PA_ERR_INTERNAL: pa_error_code = 10;
pub const pa_error_code_PA_ERR_CONNECTIONTERMINATED: pa_error_code = 11;
pub const pa_error_code_PA_ERR_KILLED: pa_error_code = 12;
pub const pa_error_code_PA_ERR_INVALIDSERVER: pa_error_code = 13;
pub const pa_error_code_PA_ERR_MODINITFAILED: pa_error_code = 14;
pub const pa_error_code_PA_ERR_BADSTATE: pa_error_code = 15;
pub const pa_error_code_PA_ERR_NODATA: pa_error_code = 16;
pub const pa_error_code_PA_ERR_VERSION: pa_error_code = 17;
pub const pa_error_code_PA_ERR_TOOLARGE: pa_error_code = 18;
pub const pa_error_code_PA_ERR_NOTSUPPORTED: pa_error_code = 19;
pub const pa_error_code_PA_ERR_UNKNOWN: pa_error_code = 20;
pub const pa_error_code_PA_ERR_NOEXTENSION: pa_error_code = 21;
pub const pa_error_code_PA_ERR_OBSOLETE: pa_error_code = 22;
pub const pa_error_code_PA_ERR_NOTIMPLEMENTED: pa_error_code = 23;
pub const pa_error_code_PA_ERR_FORKED: pa_error_code = 24;
pub const pa_error_code_PA_ERR_IO: pa_error_code = 25;
pub const pa_error_code_PA_ERR_BUSY: pa_error_code = 26;
pub const pa_error_code_PA_ERR_MAX: pa_error_code = 27;
pub type pa_error_code = u32;
pub use self::pa_error_code as pa_error_code_t;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_NULL: pa_subscription_mask = 0;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SINK: pa_subscription_mask = 1;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SOURCE: pa_subscription_mask = 2;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SINK_INPUT: pa_subscription_mask = 4;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT: pa_subscription_mask = 8;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_MODULE: pa_subscription_mask = 16;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_CLIENT: pa_subscription_mask = 32;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SAMPLE_CACHE: pa_subscription_mask = 64;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_SERVER: pa_subscription_mask = 128;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_AUTOLOAD: pa_subscription_mask = 256;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_CARD: pa_subscription_mask = 512;
pub const pa_subscription_mask_PA_SUBSCRIPTION_MASK_ALL: pa_subscription_mask = 767;
pub type pa_subscription_mask = u32;
pub use self::pa_subscription_mask as pa_subscription_mask_t;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SINK: pa_subscription_event_type = 0;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SOURCE: pa_subscription_event_type = 1;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SINK_INPUT: pa_subscription_event_type =
    2;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT:
    pa_subscription_event_type = 3;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_MODULE: pa_subscription_event_type = 4;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_CLIENT: pa_subscription_event_type = 5;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE:
    pa_subscription_event_type = 6;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_SERVER: pa_subscription_event_type = 7;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_AUTOLOAD: pa_subscription_event_type = 8;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_CARD: pa_subscription_event_type = 9;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_FACILITY_MASK:
    pa_subscription_event_type = 15;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_NEW: pa_subscription_event_type = 0;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_CHANGE: pa_subscription_event_type = 16;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_REMOVE: pa_subscription_event_type = 32;
pub const pa_subscription_event_type_PA_SUBSCRIPTION_EVENT_TYPE_MASK: pa_subscription_event_type =
    48;
pub type pa_subscription_event_type = u32;
pub use self::pa_subscription_event_type as pa_subscription_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_timing_info {
    pub timestamp: timeval,
    pub synchronized_clocks: ::std::os::raw::c_int,
    pub sink_usec: pa_usec_t,
    pub source_usec: pa_usec_t,
    pub transport_usec: pa_usec_t,
    pub playing: ::std::os::raw::c_int,
    pub write_index_corrupt: ::std::os::raw::c_int,
    pub write_index: i64,
    pub read_index_corrupt: ::std::os::raw::c_int,
    pub read_index: i64,
    pub configured_sink_usec: pa_usec_t,
    pub configured_source_usec: pa_usec_t,
    pub since_underrun: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_spawn_api {
    pub prefork: ::std::option::Option<unsafe extern "C" fn()>,
    pub postfork: ::std::option::Option<unsafe extern "C" fn()>,
    pub atfork: ::std::option::Option<unsafe extern "C" fn()>,
}
pub const pa_seek_mode_PA_SEEK_RELATIVE: pa_seek_mode = 0;
pub const pa_seek_mode_PA_SEEK_ABSOLUTE: pa_seek_mode = 1;
pub const pa_seek_mode_PA_SEEK_RELATIVE_ON_READ: pa_seek_mode = 2;
pub const pa_seek_mode_PA_SEEK_RELATIVE_END: pa_seek_mode = 3;
pub type pa_seek_mode = u32;
pub use self::pa_seek_mode as pa_seek_mode_t;
pub const pa_sink_flags_PA_SINK_NOFLAGS: pa_sink_flags = 0;
pub const pa_sink_flags_PA_SINK_HW_VOLUME_CTRL: pa_sink_flags = 1;
pub const pa_sink_flags_PA_SINK_LATENCY: pa_sink_flags = 2;
pub const pa_sink_flags_PA_SINK_HARDWARE: pa_sink_flags = 4;
pub const pa_sink_flags_PA_SINK_NETWORK: pa_sink_flags = 8;
pub const pa_sink_flags_PA_SINK_HW_MUTE_CTRL: pa_sink_flags = 16;
pub const pa_sink_flags_PA_SINK_DECIBEL_VOLUME: pa_sink_flags = 32;
pub const pa_sink_flags_PA_SINK_FLAT_VOLUME: pa_sink_flags = 64;
pub const pa_sink_flags_PA_SINK_DYNAMIC_LATENCY: pa_sink_flags = 128;
pub const pa_sink_flags_PA_SINK_SET_FORMATS: pa_sink_flags = 256;
pub type pa_sink_flags = u32;
pub use self::pa_sink_flags as pa_sink_flags_t;
pub const pa_sink_state_PA_SINK_INVALID_STATE: pa_sink_state = -1;
pub const pa_sink_state_PA_SINK_RUNNING: pa_sink_state = 0;
pub const pa_sink_state_PA_SINK_IDLE: pa_sink_state = 1;
pub const pa_sink_state_PA_SINK_SUSPENDED: pa_sink_state = 2;
pub const pa_sink_state_PA_SINK_INIT: pa_sink_state = -2;
pub const pa_sink_state_PA_SINK_UNLINKED: pa_sink_state = -3;
pub type pa_sink_state = i32;
pub use self::pa_sink_state as pa_sink_state_t;
pub const pa_source_flags_PA_SOURCE_NOFLAGS: pa_source_flags = 0;
pub const pa_source_flags_PA_SOURCE_HW_VOLUME_CTRL: pa_source_flags = 1;
pub const pa_source_flags_PA_SOURCE_LATENCY: pa_source_flags = 2;
pub const pa_source_flags_PA_SOURCE_HARDWARE: pa_source_flags = 4;
pub const pa_source_flags_PA_SOURCE_NETWORK: pa_source_flags = 8;
pub const pa_source_flags_PA_SOURCE_HW_MUTE_CTRL: pa_source_flags = 16;
pub const pa_source_flags_PA_SOURCE_DECIBEL_VOLUME: pa_source_flags = 32;
pub const pa_source_flags_PA_SOURCE_DYNAMIC_LATENCY: pa_source_flags = 64;
pub const pa_source_flags_PA_SOURCE_FLAT_VOLUME: pa_source_flags = 128;
pub type pa_source_flags = u32;
pub use self::pa_source_flags as pa_source_flags_t;
pub const pa_source_state_PA_SOURCE_INVALID_STATE: pa_source_state = -1;
pub const pa_source_state_PA_SOURCE_RUNNING: pa_source_state = 0;
pub const pa_source_state_PA_SOURCE_IDLE: pa_source_state = 1;
pub const pa_source_state_PA_SOURCE_SUSPENDED: pa_source_state = 2;
pub const pa_source_state_PA_SOURCE_INIT: pa_source_state = -2;
pub const pa_source_state_PA_SOURCE_UNLINKED: pa_source_state = -3;
pub type pa_source_state = i32;
pub use self::pa_source_state as pa_source_state_t;
pub type pa_free_cb_t = ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void)>;
pub const pa_port_available_PA_PORT_AVAILABLE_UNKNOWN: pa_port_available = 0;
pub const pa_port_available_PA_PORT_AVAILABLE_NO: pa_port_available = 1;
pub const pa_port_available_PA_PORT_AVAILABLE_YES: pa_port_available = 2;
pub type pa_port_available = u32;
pub use self::pa_port_available as pa_port_available_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_simple {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a new connection to the server."]
    pub fn pa_simple_new(
        server: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        dir: pa_stream_direction_t,
        dev: *const ::std::os::raw::c_char,
        stream_name: *const ::std::os::raw::c_char,
        ss: *const pa_sample_spec,
        map: *const pa_channel_map,
        attr: *const pa_buffer_attr,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut pa_simple;
}
extern "C" {
    #[doc = " Close and free the connection to the server. The connection object becomes invalid when this is called."]
    pub fn pa_simple_free(s: *mut pa_simple);
}
extern "C" {
    #[doc = " Write some data to the server. Returns zero on success, negative on error."]
    pub fn pa_simple_write(
        s: *mut pa_simple,
        data: *const ::std::os::raw::c_void,
        bytes: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait until all data already written is played by the daemon."]
    #[doc = " Returns zero on success, negative on error."]
    pub fn pa_simple_drain(
        s: *mut pa_simple,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Read some data from the server. This function blocks until \\a bytes amount"]
    #[doc = " of data has been received from the server, or until an error occurs."]
    #[doc = " Returns zero on success, negative on failure."]
    pub fn pa_simple_read(
        s: *mut pa_simple,
        data: *mut ::std::os::raw::c_void,
        bytes: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return the playback or record latency."]
    pub fn pa_simple_get_latency(s: *mut pa_simple, error: *mut ::std::os::raw::c_int)
        -> pa_usec_t;
}
extern "C" {
    #[doc = " Flush the playback or record buffer. This discards any audio in the buffer."]
    #[doc = " Returns zero on success, negative on error."]
    pub fn pa_simple_flush(
        s: *mut pa_simple,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
